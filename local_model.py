# -*- coding: utf-8 -*-
"""local_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VLoOr6OuiZ0EY9clCTOH_v44N-DIXttw
"""

!pip install fasttext

import pandas as pd
import fasttext
import csv
import os
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')
df = pd.read_csv("/content/drive/My Drive/cs168/all_months.csv")

NUM_MONTHS = 6

"""## Prep Dataset

## Load and reformat label shift dataset
"""

# Load Dataset
df = pd.read_csv("/content/drive/My Drive/cs168/all_months.csv")
df.head()

# Combine review body and title into one column "review" and make it lowercase
df = df.fillna("")
df["review"] = df["review_title"] + " " + df["review_body"]
df["review"] = df["review"].str.lower()
df.head()

df_4 = df[df['month'] == 1]
df_4 = df_4[df_4['stars'] == 1]
df_4.head()

"""## Define utility functions"""

# Get the dataframe for a certain month
def get_month_df(df: pd.DataFrame, month: int) -> pd.DataFrame:
    assert "month" in df
    return df[df["month"] == month]

# Add label to dataframe (__label__ is used for fasttext)
def add_fasttext_label(df: pd.DataFrame) -> pd.DataFrame:
    assert "stars" in df
    if "label" in df:
        return df
    df["label"] = df.apply(lambda row: "__label__" + str(row.stars), axis=1)
    return df

# Write the column(s) of a dataframe to a text file (used for training word embeddings)
def write_reviews_to_file(df: pd.DataFrame, columns, fname: str) -> pd.DataFrame:
    df[columns].to_csv(fname, 
        index=False, 
        sep=' ', 
        header=False,
        quoting=csv.QUOTE_NONE, 
        quotechar="", 
        escapechar=" ",
        encoding='utf-8')
    return

# Train embeddings on file
def train_fasttext_embeddings(fname: str):
    return fasttext.train_unsupervised(fname, model='cbow')

# Train fasttext model
def train_fasttext(fname: str, lr):
    return fasttext.train_supervised(fname, ws = 3, lr = 0.3)

# Reset files
def delete_text_files(dir_name: str) -> None:
    for item in os.listdir(dir_name):
        if item.endswith(".txt"):
            os.remove(os.path.join(dir_name, item))

# Concatenate two months' reviews
def concat_months(df: pd.DataFrame, month1: int, month2: int) -> pd.DataFrame:
    assert "month" in df
    return df[(df["month"] == month1) | (df["month"] == month2)]

# Concatenate two months' reviews, accumulative
def concat_months_acc(orig_df: pd.DataFrame, cur_df: pd.DataFrame, month1: int) -> pd.DataFrame:
    assert "month" in df
    to_append = df[df["month"] == month1]
    return cur_df.append(to_append)

"""## Write reviews and training data for each month to text files"""

# Reset files
delete_text_files("/content/drive/My Drive/cs168/")

# Write reviews for each month to its own text file
for month in range(1, NUM_MONTHS+1):
    month_df = get_month_df(df=df, month=month)
    write_reviews_to_file(df=month_df, columns=["review"], fname=f"/content/drive/My Drive/cs168/month_{month}.txt")

# Write reviews + labels for each month to its own text file
for month in range(1, NUM_MONTHS+1):
    month_df = get_month_df(df=df, month=month)
    month_df = add_fasttext_label(df=month_df)
    write_reviews_to_file(df=month_df, columns=["label", "review"], fname=f"/content/drive/My Drive/cs168/month_{month}.label.txt")

# COCATENATED MONTHS (sliding window = 2) Write reviews, reviews + labels
cur_month = 1
while (cur_month < NUM_MONTHS):

  month_name = str(cur_month) + str(cur_month+1)
  print("month name: ", month_name)
  concat_df = concat_months(df, cur_month, cur_month+1)
  write_reviews_to_file(df=month_df, columns=["review"], fname=f"/content/drive/My Drive/cs168/month_{month_name}.txt")

  concat_df = add_fasttext_label(df=concat_df)
  write_reviews_to_file(df=concat_df, columns=["label", "review"], fname=f"/content/drive/My Drive/cs168/month_{month_name}.label.txt")
  cur_month += 1

# CONCATENATED MONTHS (CUMULATIVE) Write reviews + labels
month_name = "1"
last_df = df[df['month'] == 1]
cur_month = 2
while (cur_month <= NUM_MONTHS):
  month_name += str(cur_month)
  print("month name: ", month_name)

  concat_df = concat_months_acc(df, last_df, cur_month)
  last_df = concat_df
  concat_cpy = concat_df.copy()
  write_reviews_to_file(df=concat_cpy, columns=["review"], fname=f"/content/drive/My Drive/cs168/month_{month_name}.txt")

  withlabels_df = add_fasttext_label(df=concat_cpy)

  write_reviews_to_file(df=withlabels_df, columns=["label", "review"], fname=f"/content/drive/My Drive/cs168/month_{month_name}.label.txt")
  cur_month += 1

model = train_fasttext(fname="/content/drive/My Drive/cs168/month_123.label.txt", lr = 0.1)

print(model.words)
print(model.labels)

model.predict("HORRIBLE", k = 3)

def print_results(N, p, r):
    print("N\t" + str(N))
    print("P@{}\t{:.3f}".format(1, p))
    print("R@{}\t{:.3f}".format(1, r))

print_results(*model.test("/content/drive/My Drive/cs168/month_12.label.txt"))
model_test = model.test("/content/drive/My Drive/cs168/month_1.label.txt")
print(model_test[1])

# Test on different learning rates
def fasttext_bulktrain(train_fname, test_fname, learning_rates: list):
  best_model_acc = 0
  best_model = None
  ws = 5

  for lr in learning_rates:
    model = fasttext.train_supervised(train_fname, ws = ws, lr = lr)
    test_results = model.test(test_fname)
    # print("lr:", lr, "; acc: ", test_results)
    if test_results[1] > best_model_acc: # comparing precisions
       best_model = model
       best_model_acc = test_results[1]

  return best_model, best_model_acc

def print_lr_acc(train_month, test_month):
  lr = [i / 10 for i in range(10)]

  train = f'/content/drive/My Drive/cs168/month_{train_month}.label.txt'
  test = f'/content/drive/My Drive/cs168/month_{test_month}.label.txt'

  model, acc = fasttext_bulktrain(train, test, lr)
  print("Train:", train_month, "Test:", test_month, "best acc: ", acc)
  return train_month, test_month, acc

# Single file prediction
train = 1
print_lr_acc(train, 1)
print_lr_acc(train, 2)
print_lr_acc(train, 3)
print_lr_acc(train, 4)
print_lr_acc(train, 5)

# 2-month sliding window prediction
cur = 1
acc_1 = []
acc_2 = []
while (cur <= NUM_MONTHS - 2):
  _, _, acc = print_lr_acc(10*cur + cur+1, cur+2)
  acc_1 += [acc]
  print('vs.')
  _, _, acc = print_lr_acc(cur+1, cur+2)
  acc_2 += [acc]
  print("\n")
  cur += 1

# Sliding Window Plot

width = 0.35
x = np.array([i for i in range(3,7)])

fig, ax = plt.subplots()
rects1 = ax.bar(x, acc_1, width, color='g')
rects2 = ax.bar(x + width, acc_2, width, color='r')
ax.set_ylabel('Accuracies')
ax.set_xlabel('Prediction Month')
ax.set_title('Accuracies of Sliding Window Training vs. Single Month Training')
ax.set_xticks(x + width/ 2)
ax.set_xticklabels(x)
ax.legend((rects1[0], rects2[0]), ('Sliding Window', 'Single'))
plt.show()

# Cumulative prediction
cur = 3
train = "12"
acc1 = []
acc2 = []
x = [i for i in range(3,6)]
while (cur <= NUM_MONTHS):
  _, _, acc = print_lr_acc(train, cur)
  acc1 += [acc]
  train += str(cur)
  print('vs.')
  _, _, acc = print_lr_acc(cur-1, cur)
  acc2 += [acc]
  print("\n")
  cur += 1

import numpy as np

width = 0.35
x = np.array([i for i in range(3,7)])

fig, ax = plt.subplots()
rects1 = ax.bar(x, acc1, width, color='g')
rects2 = ax.bar(x + width, acc2, width, color='r')
ax.set_ylabel('Accuracies')
ax.set_xlabel('Prediction Month')
ax.set_title('Accuracies of Cumulative Month Training vs. Single Month Training')
ax.set_xticks(x + width/ 2)
ax.set_xticklabels(x)
ax.legend((rects1[0], rects2[0]), ('Cumulative', 'Single'))
plt.show()

